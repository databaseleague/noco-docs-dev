"use strict";(self.webpackChunknoco_docs=self.webpackChunknoco_docs||[]).push([[2868],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),s=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=s(e.components);return a.createElement(c.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},f=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=s(n),f=r,m=d["".concat(c,".").concat(f)]||d[f]||u[f]||o;return n?a.createElement(m,i(i({ref:t},p),{},{components:n})):a.createElement(m,i({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=f;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[d]="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}f.displayName="MDXCreateElement"},5484:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var a=n(7462),r=(n(7294),n(3905));const o={title:"Upload via API",description:"Upload files locally present or from public remote URL via API",hide_table_of_contents:!0},i=void 0,l={unversionedId:"developer-resources/upload-via-api",id:"developer-resources/upload-via-api",title:"Upload via API",description:"Upload files locally present or from public remote URL via API",source:"@site/docs/040.developer-resources/050.upload-via-api.md",sourceDirName:"040.developer-resources",slug:"/developer-resources/upload-via-api",permalink:"/developer-resources/upload-via-api",draft:!1,editUrl:"https://github.com/nocodb/nocodb/tree/develop/packages/noco-docs/docs/docs/040.developer-resources/050.upload-via-api.md",tags:[],version:"current",sidebarPosition:50,frontMatter:{title:"Upload via API",description:"Upload files locally present or from public remote URL via API",hide_table_of_contents:!0},sidebar:"tutorialSidebar",previous:{title:"Webhooks",permalink:"/developer-resources/webhooks"},next:{title:"Architecture Overview",permalink:"/engineering/architecture"}},c={},s=[],p={toc:s},d="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Sample code to upload files via API is listed below.\nAssumes ",(0,r.kt)("inlineCode",{parentName:"p"},"http://localhost:8080/")," as the base URL for the API calls."),(0,r.kt)("h1",{id:"upload-local-file"},"Upload local file"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"let axios = require(\"axios\").default;\nlet FormData = require('form-data');\nlet fs = require('fs');\n\n// Configurations\n//\nconst project_id = '<Project Identifier>';\nconst table_id = '<Table Identifier>';\nconst xc_token = '<Auth Token>';\nconst file_path = '<Local File Path>';\n\n\n// Insert Image\n// @param image_path : local file path\n// @return : JSON object to be used in insert record API for attachment field\n//\nasync function insertImage (path) {\n    const formData = new FormData();\n    formData.append(\"file\", fs.createReadStream(path));\n    const data = await axios({\n        url: 'http://localhost:8080/api/v1/db/storage/upload',\n        data: formData,\n        headers:{\n            'Content-Type':`multipart/form-data;`,\n            'xc-auth': xc_token\n        },\n        method: 'post',\n\n        // Optional : storage file path\n        params: {\"path\": \"somePath\"}\n    });\n    return data;\n}\n\n// Insert record with attachment\n// Assumes a table with two columns :\n//      'Title' of type SingleLineText and\n//      'Attachment' of type Attachment\n//\nasync function uploadFileExample() {\n    let response = await insertImage(file_path);\n\n    let row = {\n        \"Title\": \"2\",\n        \"Attachment\": response.data\n    };\n\n    await axios({\n        method: 'POST',\n        url: `http://localhost:8080/api/v1/db/data/noco/${project_id}/${table_id}`,\n        data: row,\n        headers: {\n            'xc-auth': xc_token\n        }\n    });\n}\n\n(async () => {\n    await uploadFileExample();\n})();\n")),(0,r.kt)("h1",{id:"upload-via-url"},"Upload via URL"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"let axios = require(\"axios\").default;\nlet FormData = require('form-data');\nlet fs = require('fs');\n\n// Configurations\n//\nconst project_id = '<Project Identifier>';\nconst table_id = '<Table Identifier>';\nconst xc_token = '<Auth Token>';\n\n// URL array : URLs of files to be uploaded\nconst URLs = [{ url: '<URL1>' }, { url: '<URL2>' }];\n\n// Insert Image\n// @param URLs : [] containing public URL for files to be uploaded\n// @return : JSON object to be used in insert record API for attachment field\n//\nasync function insertImageByURL (URL_array) {\n    const data = await axios({\n        url: 'http://localhost:8080/api/v1/db/storage/upload-by-url',\n        data: URL_array,\n        headers: {\n            'xc-auth': xc_token\n        },\n        method: 'post',\n\n        // Optional : storage file path\n        params: {\"path\": \"somePath\"}\n    });\n    return data;\n}\n\n// Insert record with attachment\n// Assumes a table with two columns :\n//      'Title' of type SingleLineText and\n//      'Attachment' of type Attachment\n//\nasync function uploadByUrlExample() {\n    let response = await insertImageByURL(URLs);\n\n    // Update two columns : Title and Attachment\n    let row = {\n        \"Title\": \"3\",\n        \"Attachment\": response.data\n    };\n\n    await axios({\n        method: 'POST',\n        url: `http://localhost:8080/api/v1/db/data/noco/${project_id}/${table_id}`,\n        data: row,\n        headers: {\n            'xc-auth': xc_auth\n        }\n    });\n}\n\n(async () => {\n    await uploadByUrlExample();\n})();\n")))}u.isMDXComponent=!0}}]);